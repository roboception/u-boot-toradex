arch=arm
autoload=false
baudrate=115200
blink_disable=i2c mw 0x32 0x01 00 1
blink_red=i2c mw 0x32 0x01 02 1
blink_red_not_blue=run blink_disable && run disable_blue && run enable_red && run blink_red
blkcnt=100
board=apalis-tk1
board_name=apalis-tk1
boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}
boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}extlinux/extlinux.conf
boot_file=uImage
boot_net_pci_enum=pci enum
boot_net_usb_start=usb start
boot_prefixes=/ /boot/
boot_script_dhcp=boot.scr.uimg
boot_scripts=boot.scr.uimg boot.scr
boot_targets=mmc1 mmc0 usb0 pxe dhcp
bootcmd=run emmcboot; setenv fdtfile ${soc}-apalis-${fdt_board}.dtb && run distro_bootcmd
bootcmd_dhcp=run boot_net_usb_start; run boot_net_pci_enum; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi;
bootcmd_mmc0=setenv devnum 0; run mmc_boot
bootcmd_mmc1=setenv devnum 1; run mmc_boot
bootcmd_pxe=run boot_net_usb_start; run boot_net_pci_enum; dhcp; if pxe get; then pxe boot; fi
bootcmd_usb0=setenv devnum 0; run usb_boot
bootdelay=1
bootfile=apalis-tk1/uboot-env.bin
check_0=setenv conf_blk_offset 0x1ffff; mmc read ${loadaddr} ${conf_blk_offset} 1
check_1=setenv conf_blk_offset 0x1fff; mmc read ${loadaddr} ${conf_blk_offset} 1
check_2=setenv conf_blk_offset 0xfff; mmc read ${loadaddr} ${conf_blk_offset} 1
check_3=setenv conf_blk_offset 0x7ff; mmc read ${loadaddr} ${conf_blk_offset} 1
check_configblock=setexpr toradex_oui_addr ${loadaddr} + 8; mmc dev 0 1; run check_0 || run check_1 || run check_2 || run check_3; crc32 -v ${toradex_oui_addr} 3 94305232
console=ttyS0
cp_file_chunk=if tftpboot ${loadaddr} ${board_name}/root.ext3-${filenum}; then run set_blkcnt; mmc dev 0 0 && mmc write ${loadaddr} ${blkstart} ${blkcnt}; else run blink_red_not_blue && setenv rootfs_chunk_loss 1; fi
cp_file_chunk_data=if tftpboot ${loadaddr} ${board_name}/data.ext3-${filenum}; then run set_blkcnt; mmc dev 0 0 && mmc write ${loadaddr} ${blkstart} ${blkcnt}; else && run blink_red_not_blue && setenv data_chunk_loss 1; fi
cpu=armv7
data_chunk_loss=0
data_loss_check=if test ${data_chunk_loss} = 1; then echo handle data image chunk file loss && setenv failed_data_flash 1 && saveenv && false; elif test ${data_chunk_loss} = 0; then echo all data image chunk files received && setenv failed_data_flash 0 && true; else echo forbidden variable value && false; fi
defargs=lp0_vec=2064@0xf46ff000 core_edp_mv=1150 core_edp_ma=4000 usb_port_owner_info=2 lane_owner_info=6 emc_max_dvfs=0
dfu_alt_info=apalis-tk1.img raw 0x0 0x500 mmcpart 1; boot part 0 1 mmcpart 0; rootfs part 0 2 mmcpart 0; uImage fat 0 1 mmcpart 0; tegra124-apalis-eval.dtb fat 0 1 mmcpart 0
disable_blue=i2c mw 0x32 17 00
distro_bootcmd=for target in ${boot_targets}; do run bootcmd_${target}; done
dnsip=10.0.0.1
emmcargs=ip=off root=/dev/mmcblk0p2 rw rootfstype=ext3 rootwait
emmcboot=run setup; setenv bootargs ${defargs} ${emmcargs} ${setupargs} ${vidargs}; echo Booting from internal eMMC chip...; run emmcdtbload; load mmc 0:1 ${kernel_addr_r} ${boot_file} && run fdt_fixup && bootm ${kernel_addr_r} - ${dtbparam}
emmcdtbload=setenv dtbparam; load mmc 0:1 ${fdt_addr_r} ${soc}-apalis-${fdt_board}.dtb && setenv dtbparam ${fdt_addr_r}
ethact=e1000#0
ethaddr=00:14:2d:00:00:00
failed_boot_flash=0
failed_data_flash=0
failed_mbr_flash=0
failed_rootfs_flash=0
failed_uboot_env_flash=0
failed_uboot_flash=0
fdt_addr_r=0x82000000
fdt_board=eval
fdt_fixup=;
fdt_high=ffffffff
fileaddr=81000000
filesize=20000
gatewayip=10.0.3.254
incr_decimal=setexpr filenum ${filenum} + 1; setexpr filenrlow1 ${filenum} % 0x100; setexpr filenrlow2 ${filenrlow1} % 0x10; test ${filenrlow1} -eq "9a" && test ${filenrlow2} -ne "9" && setexpr filenum ${filenum} + 0x66; test ${filenrlow1} -ne "9a" && test ${filenrlow2} -eq "a" && setexpr filenum ${filenum} + 0x6; true
initrd_high=ffffffff
ipaddr=10.0.2.40
kernel_addr_r=0x81000000
loadaddr=0x81000000
mmc_boot=if mmc dev ${devnum}; then setenv devtype mmc; run scan_dev_for_boot_part; fi
netmask=255.255.252.0
nfsargs=ip=:::::eth0:on root=/dev/nfs rw
nfsboot=pci enum; run setup; setenv bootargs ${defargs} ${nfsargs} ${setupargs} ${vidargs}; echo Booting via DHCP/TFTP/NFS...; run nfsdtbload; dhcp ${kernel_addr_r} && run fdt_fixup && bootm ${kernel_addr_r} - ${dtbparam}
nfsdtbload=setenv dtbparam; tftp ${fdt_addr_r} ${soc}-apalis-${fdt_board}.dtb && setenv dtbparam ${fdt_addr_r}
pxefile_addr_r=0x90100000
ramdisk_addr_r=0x82100000
rootfs_chunk_loss=0
rootfs_loss_check=if test ${rootfs_chunk_loss} = 1; then echo handle rootfs image chunk file loss && setenv failed_rootfs_flash 1 && saveenv && false; elif test ${rootfs_chunk_loss} = 0; then echo all rootfs image chunk files received && setenv failed_rootfs_flash 0 && true; else echo forbidden variable value && false; fi
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done;
scan_dev_for_boot_part=part list ${devtype} ${devnum} -bootable devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}extlinux/extlinux.conf; then echo Found ${prefix}extlinux/extlinux.conf; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
scriptaddr=0x90000000
sdargs=ip=off root=/dev/mmcblk1p2 rw rootfstype=ext3 rootwait
sdboot=run setup; setenv bootargs ${defargs} ${sdargs} ${setupargs} ${vidargs}; echo Booting from SD card in 8bit slot...; run sddtbload; load mmc 1:1 ${kernel_addr_r} ${boot_file} && run fdt_fixup && bootm ${kernel_addr_r} - ${dtbparam}
sddtbload=setenv dtbparam; load mmc 1:1 ${fdt_addr_r} ${soc}-apalis-${fdt_board}.dtb && setenv dtbparam ${fdt_addr_r}
serverip=10.0.1.19
set_blkcnt=setexpr blkcnt ${filesize} + 0x1ff && setexpr blkcnt ${blkcnt} / 0x200
set_nextnum=run incr_decimal; setexpr blkstart ${blkstart} + ${blkcnt}
setethupdate=if env exists ethaddr; then; else setenv ethaddr 00:14:2d:00:00:00; fi; pci enum && tftpboot ${loadaddr} flash_eth.img && source ${loadaddr}
setsdupdate=setenv interface mmc; setenv drive 1; mmc rescan; load ${interface} ${drive}:1 ${loadaddr} flash_blk.img || setenv drive 2; mmc rescan; load ${interface} ${drive}:1 ${loadaddr} flash_blk.img && source ${loadaddr}
setup=setenv setupargs igb_mac=${ethaddr} consoleblank=0 no_console_suspend=1 console=tty1 console=${console},${baudrate}n8 debug_uartport=lsport,0 ${memargs}
setupdate=run setsdupdate || run setusbupdate || run setethupdate
setusbupdate=usb start && setenv interface usb; setenv drive 0; load ${interface} ${drive}:1 ${loadaddr} flash_blk.img && source ${loadaddr}
soc=tegra124
startblk_factory_data=0xc000
startblk_mbr=0x0
startblk_uboot=0x0
startblk_uboot_env=0x0
stderr=serial
stdin=serial
stdout=serial
update=run update_uboot && run update_mbr && run update_factory && run update_rootfs_a && run update_rootfs_b && run update_data
update_configblock=run check_configblock; tftpboot ${loadaddr} ${board_name}/configblock.bin && mmc dev 0 1 && mmc write ${loadaddr} ${conf_blk_offset} 1
update_data=setenv data_chunk_loss 0; setenv filesize 4000000; setenv filenum 100; setenv blkstart 0x1784000; while test ${filesize} -eq "4000000"; do run cp_file_chunk_data; run set_nextnum; done; run data_loss_check;
update_factory=if tftpboot ${loadaddr} ${board_name}/factory.ext3; then run set_blkcnt && mmc dev 0 0 && mmc write ${loadaddr} ${startblk_factory_data} ${blkcnt} && setenv failed_boot_flash 0 && true; else echo tftp load of factory image failed && run blink_red_not_blue && setenv failed_boot_flash 1 && saveenv && false; fi
update_followup=run update_uboot && run update_mbr && run update_rootfs_a && run update_rootfs_b
update_mbr=if tftpboot ${loadaddr} ${board_name}/mbr.bin; then mmc dev 0 0 && mmc write ${loadaddr} ${startblk_mbr} 0x1 && setenv failed_mbr_flash 0 && true; else echo tftp load of mbr failed && run blink_red_not_blue && setenv failed_mbr_flash 1 && saveenv && false; fi
update_rootfs_a=setenv rootfs_chunk_loss 0; setenv filesize 4000000; setenv filenum 100; setenv blkstart 0x14000; while test ${filesize} -eq "4000000"; do run cp_file_chunk; run set_nextnum; done; run rootfs_loss_check;
update_rootfs_b=setenv rootfs_chunk_loss 0; setenv filesize 4000000; setenv filenum 100; setenv blkstart 0xbcc000; while test ${filesize} -eq "4000000"; do run cp_file_chunk; run set_nextnum; done; run rootfs_loss_check;
update_uboot=if tftpboot ${loadaddr} ${board_name}/${board_name}.img; then run set_blkcnt && mmc dev 0 1 && mmc write ${loadaddr} ${startblk_uboot} ${blkcnt} && setenv failed_uboot_flash 0 && true; else echo tftp load of bootloader image failed && run blink_red_not_blue && setenv failed_uboot_flash 1 && saveenv && false; fi
update_uboot_env=if tftpboot ${loadaddr} ${board_name}/uboot-env.bin; then run set_blkcnt && mmc dev 0 1 && mmc write ${loadaddr} ${startblk_uboot_env} ${blkcnt} && setenv failed_uboot_env_flash 0 && true; else echo tftp load of bootloader environment image failed && run blink_red_not_blue && setenv failed_uboot_env_flash 1 && saveenv && false; fi
usb_boot=usb start; if usb dev ${devnum}; then setenv devtype usb; run scan_dev_for_boot_part; fi
usbargs=ip=off root=/dev/sda2 rw rootfstype=ext3 rootwait
usbboot=run setup; setenv bootargs ${defargs} ${setupargs} ${usbargs} ${vidargs}; echo Booting from USB stick...; usb start && run usbdtbload; load usb 0:1 ${kernel_addr_r} ${boot_file} && run fdt_fixup && bootm ${kernel_addr_r} - ${dtbparam}
usbdtbload=setenv dtbparam; load usb 0:1 ${fdt_addr_r} ${soc}-apalis-${fdt_board}.dtb && setenv dtbparam ${fdt_addr_r}
vendor=toradex
vidargs=video=tegrafb0:640x480-16@60 fbcon=map:1
